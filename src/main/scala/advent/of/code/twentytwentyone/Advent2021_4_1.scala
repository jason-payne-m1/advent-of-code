package advent.of.code.twentytwentyone

import scala.util.control.Breaks.{break, breakable}

object Advent2021_4_1 {

//  val inputBalls = Seq(7, 4, 9, 5, 11, 17, 23, 2, 0, 14, 21, 24, 10, 16, 13, 6, 15, 25, 12, 22, 18, 20, 8, 19, 3, 26, 1)
//  val inputBoards = Array(Array(22, 13, 17, 11, 0), Array(8, 2, 23, 4, 24), Array(21, 9, 14, 16, 7), Array(6, 10, 3, 18, 5), Array(1, 12, 20, 15, 19), Array(3, 15, 0, 2, 22), Array(9, 18, 13, 17, 5), Array(19, 8, 7, 25, 23), Array(20, 11, 10, 24, 4), Array(14, 21, 16, 12, 6), Array(14, 21, 17, 24, 4), Array(10, 16, 15, 9, 19), Array(18, 8, 23, 26, 20), Array(22, 11, 13, 6, 5), Array(2, 0, 12, 3, 7))

  val inputBalls = Seq(26,38,2,15,36,8,12,46,88,72,32,35,64,19,5,66,20,52,74,3,59,94,45,56,0,6,67,24,97,50,92,93,84,65,71,90,96,21,87,75,58,82,14,53,95,27,49,69,16,89,37,13,1,81,60,79,51,18,48,33,42,63,39,34,62,55,47,54,23,83,77,9,70,68,85,86,91,41,4,61,78,31,22,76,40,17,30,98,44,25,80,73,11,28,7,99,29,57,43,10)

  val inputBoards = Array(Array(57,12,60,96,93),Array(73,87,63,70,91),Array(74,32,43,67,46),Array(59,34,5,35,82),Array(53,40,55,29,1),Array(48,71,59,45,63),Array(13,42,23,95,39),Array(84,82,10,29,4),Array(16,91,32,92,62),Array(99,33,20,21,3),Array(51,20,32,30,90),Array(86,88,89,1,73),Array(5,64,78,81,22),Array(95,50,7,27,17),Array(39,82,46,35,92),Array(2,65,21,77,97),Array(50,46,38,99,82),Array(22,1,24,63,70),Array(8,32,80,98,35),Array(57,67,25,81,18),Array(64,7,26,44,14),Array(42,71,19,22,0),Array(4,36,51,25,6),Array(69,59,90,15,88),Array(85,65,32,76,70),Array(8,69,75,42,44),Array(64,25,72,71,34),Array(2,94,81,14,38),Array(97,89,59,23,88),Array(57,70,13,1,51),Array(93,94,26,11,35),Array(63,57,84,10,92),Array(12,29,78,65,64),Array(54,75,61,50,81),Array(13,90,2,66,99),Array(10,21,39,24,56),Array(90,49,25,80,59),Array(41,72,47,74,79),Array(9,89,42,92,31),Array(20,1,32,58,83),Array(81,11,58,2,69),Array(79,23,60,8,63),Array(94,9,0,45,34),Array(36,31,61,71,74),Array(51,48,59,99,70),Array(66,47,88,16,18),Array(35,75,54,26,77),Array(23,55,33,3,19),Array(82,71,57,80,45),Array(22,8,40,76,20),Array(8,5,95,86,76),Array(49,21,82,78,77),Array(12,38,61,85,4),Array(14,54,42,40,39),Array(69,66,1,0,7),Array(85,66,96,45,64),Array(25,55,36,76,37),Array(82,61,29,47,54),Array(73,94,3,59,24),Array(71,62,31,98,79),Array(84,10,60,61,97),Array(75,90,95,6,8),Array(93,89,65,70,80),Array(35,15,46,55,77),Array(52,3,74,39,36),Array(80,24,59,71,52),Array(17,43,45,8,6),Array(58,22,32,46,98),Array(48,3,56,31,77),Array(97,28,55,0,76),Array(51,98,12,49,19),Array(28,94,9,97,85),Array(5,78,47,93,24),Array(67,0,37,81,76),Array(77,48,15,69,50),Array(34,45,5,80,14),Array(82,42,63,2,86),Array(3,95,54,74,69),Array(46,27,49,92,66),Array(0,85,98,83,17),Array(41,99,93,62,96),Array(90,30,10,5,94),Array(98,32,83,78,25),Array(76,27,29,19,35),Array(58,91,34,31,3),Array(31,1,24,96,36),Array(58,12,59,57,92),Array(84,5,55,49,41),Array(54,72,70,95,88),Array(66,50,22,35,15),Array(35,57,69,13,93),Array(34,62,28,26,36),Array(6,64,47,74,45),Array(0,32,19,33,44),Array(65,25,90,91,1),Array(57,96,70,15,89),Array(7,65,29,12,34),Array(40,25,36,81,86),Array(58,39,27,79,59),Array(19,91,47,6,11),Array(60,74,67,87,68),Array(80,53,42,91,89),Array(11,19,8,78,31),Array(4,6,30,10,90),Array(64,41,27,59,12),Array(45,0,86,81,34),Array(8,29,53,12,32),Array(89,74,64,26,96),Array(60,13,87,35,73),Array(52,69,23,46,40),Array(43,35,1,59,40),Array(63,74,7,53,94),Array(39,42,8,84,27),Array(66,65,46,82,80),Array(61,76,13,31,45),Array(38,4,51,76,5),Array(36,57,3,86,84),Array(83,37,60,67,52),Array(0,70,7,19,72),Array(62,99,9,75,58),Array(95,47,78,27,14),Array(50,82,17,15,22),Array(1,76,64,73,71),Array(24,26,42,79,55),Array(36,40,43,81,59),Array(13,7,60,49,87),Array(30,31,99,19,82),Array(91,88,53,96,97),Array(37,11,47,32,81),Array(86,94,45,71,38),Array(64,42,19,6,69),Array(33,2,61,98,55),Array(20,48,5,82,56),Array(78,11,65,59,74),Array(85,72,1,54,29),Array(76,56,84,34,83),Array(16,26,33,50,3),Array(85,20,87,31,51),Array(62,7,28,96,8),Array(81,57,89,44,58),Array(92,49,58,8,45),Array(47,89,48,91,71),Array(53,67,37,59,88),Array(24,69,96,61,16),Array(2,6,68,95,60),Array(99,60,39,96,0),Array(62,14,77,70,47),Array(72,98,66,42,58),Array(85,19,12,23,44),Array(68,28,51,94,82),Array(59,32,45,99,92),Array(96,36,30,87,9),Array(61,54,71,94,22),Array(76,4,62,20,2),Array(40,18,43,70,44),Array(22,54,77,12,3),Array(5,11,41,19,58),Array(49,51,75,24,63),Array(42,20,43,92,69),Array(62,36,15,25,80),Array(93,40,48,21,10),Array(0,83,86,31,65),Array(52,7,17,67,72),Array(95,28,63,99,47),Array(51,22,85,55,44),Array(43,26,86,80,94),Array(93,66,84,90,61),Array(91,58,71,73,89),Array(9,72,81,48,54),Array(11,60,36,25,70),Array(33,42,73,20,69),Array(15,12,27,72,14),Array(93,30,89,86,22),Array(77,25,80,85,74),Array(66,78,0,49,82),Array(37,84,46,86,39),Array(55,31,96,17,43),Array(12,33,45,97,9),Array(44,57,25,77,78),Array(5,73,81,35,58),Array(19,41,87,94,59),Array(97,84,78,52,77),Array(70,15,91,53,1),Array(71,47,82,35,99),Array(25,55,58,39,29),Array(29,74,31,73,72),Array(23,10,83,63,25),Array(18,26,79,35,65),Array(59,44,98,45,20),Array(67,7,87,28,11),Array(83,89,92,55,72),Array(32,6,78,93,49),Array(66,77,5,60,61),Array(85,57,29,97,65),Array(86,84,48,20,75),Array(85,82,83,66,86),Array(64,61,77,38,84),Array(1,68,4,18,72),Array(56,97,37,98,74),Array(44,14,78,52,93),Array(30,73,72,24,51),Array(78,3,97,39,5),Array(90,42,58,96,17),Array(33,95,44,27,1),Array(80,16,84,54,99),Array(92,88,79,14,10),Array(24,52,80,46,51),Array(11,31,35,53,25),Array(44,54,63,33,93),Array(87,38,15,64,4),Array(14,25,61,40,95),Array(34,17,97,38,26),Array(64,90,45,91,65),Array(8,50,23,11,74),Array(32,33,22,88,28),Array(8,32,94,72,74),Array(27,29,22,2,76),Array(58,54,80,5,35),Array(36,24,83,59,25),Array(21,31,48,39,4),Array(56,13,22,53,72),Array(61,60,81,87,86),Array(7,74,98,28,11),Array(67,38,91,23,0),Array(42,84,24,3,47),Array(29,98,43,45,30),Array(86,50,15,60,11),Array(18,34,8,67,24),Array(36,97,69,27,79),Array(35,87,52,55,61),Array(40,50,30,75,72),Array(1,62,85,21,11),Array(80,10,91,7,2),Array(27,31,73,25,29),Array(63,65,55,87,23),Array(12,68,47,77,76),Array(98,30,6,51,80),Array(22,85,88,99,24),Array(35,90,82,18,37),Array(17,27,34,54,43),Array(85,46,35,16,45),Array(4,6,96,9,61),Array(44,90,64,29,50),Array(76,38,69,80,28),Array(27,23,51,8,7),Array(72,8,62,61,83),Array(0,30,92,29,7),Array(86,28,54,52,5),Array(32,97,82,68,31),Array(76,69,22,12,13),Array(66,67,1,36,94),Array(80,99,49,47,38),Array(76,95,30,13,19),Array(83,21,45,44,43),Array(29,91,14,20,98),Array(8,80,3,82,99),Array(62,41,47,6,27),Array(12,72,76,81,36),Array(30,7,67,90,5),Array(85,31,83,49,19),Array(25,91,86,47,27),Array(69,74,20,17,97),Array(59,45,87,28,75),Array(49,94,63,33,9),Array(8,66,2,30,32),Array(69,58,41,84,5),Array(27,2,22,65,88),Array(63,96,90,17,85),Array(26,52,86,20,8),Array(3,9,59,50,57),Array(80,85,90,5,56),Array(66,57,76,65,62),Array(81,74,15,38,32),Array(0,75,61,16,79),Array(96,50,8,86,1),Array(52,21,98,54,94),Array(73,90,87,58,50),Array(38,39,30,69,82),Array(55,12,81,48,29),Array(93,23,91,47,28),Array(92,14,3,1,19),Array(18,27,91,62,86),Array(61,80,49,53,97),Array(77,98,52,0,8),Array(17,54,85,59,51),Array(49,45,38,70,33),Array(96,18,63,5,99),Array(65,58,29,91,19),Array(78,7,98,39,17),Array(31,15,13,35,75),Array(55,50,58,96,94),Array(67,72,4,40,90),Array(59,31,15,78,81),Array(1,80,56,34,20),Array(27,52,88,75,53),Array(0,5,91,65,72),Array(53,42,4,50,25),Array(13,52,81,79,92),Array(46,89,55,58,95),Array(19,77,30,36,18),Array(38,97,86,69,44),Array(70,52,14,19,29),Array(9,36,96,24,80),Array(84,22,32,72,48),Array(28,3,46,42,87),Array(94,93,31,33,38),Array(21,30,34,69,35),Array(1,10,55,79,57),Array(54,28,44,78,73),Array(8,20,45,41,23),Array(32,13,49,80,68),Array(41,95,84,74,57),Array(15,61,5,77,67),Array(53,54,29,51,75),Array(24,66,36,88,90),Array(74,49,19,2,66),Array(94,45,30,84,37),Array(7,24,22,87,60),Array(13,40,57,9,1),Array(56,42,92,67,27),Array(29,7,97,22,36),Array(80,77,92,3,67),Array(48,54,73,51,41),Array(28,8,55,24,4),Array(13,11,66,5,86),Array(76,16,8,71,92),Array(23,61,53,27,43),Array(25,6,17,32,64),Array(40,69,21,84,93),Array(89,30,55,90,41),Array(86,22,81,13,33),Array(35,87,82,77,71),Array(96,65,37,62,51),Array(16,72,36,93,23),Array(84,44,26,66,27),Array(4,73,52,35,43),Array(39,9,96,34,70),Array(19,67,38,10,54),Array(21,7,36,13,90),Array(84,28,59,57,75),Array(55,7,32,68,97),Array(10,56,46,28,66),Array(74,81,18,73,26),Array(44,76,13,35,61),Array(90,36,45,64,58),Array(96,62,97,87,95),Array(45,78,38,84,41),Array(91,19,88,25,22),Array(12,27,31,92,5),Array(15,83,7,53,71),Array(31,17,96,6,47),Array(3,90,27,89,75),Array(53,39,62,82,13),Array(52,34,23,83,87),Array(19,67,50,98,84),Array(96,3,70,17,42),Array(50,74,65,53,31),Array(52,80,18,26,77),Array(29,57,95,25,81),Array(88,92,55,13,28),Array(63,34,56,1,4),Array(40,97,10,5,50),Array(96,55,15,68,37),Array(43,33,89,72,3),Array(11,88,44,86,2),Array(65,44,24,34,41),Array(1,68,67,6,26),Array(27,88,73,25,9),Array(55,56,16,48,29),Array(33,18,77,3,94),Array(91,75,35,33,56),Array(96,19,69,81,53),Array(25,14,32,74,22),Array(24,6,89,42,90),Array(9,2,77,67,20),Array(19,97,36,78,71),Array(16,26,99,23,92),Array(10,68,74,90,88),Array(30,60,96,11,34),Array(8,76,35,53,22),Array(84,15,76,31,63),Array(1,34,96,70,35),Array(66,57,71,26,61),Array(83,41,74,85,60),Array(16,28,30,23,49),Array(72,88,56,92,86),Array(12,44,71,47,30),Array(39,53,4,46,45),Array(38,5,9,35,25),Array(8,61,13,50,82),Array(62,92,49,21,95),Array(70,47,73,74,56),Array(17,89,0,39,60),Array(42,99,13,63,67),Array(43,16,11,20,84),Array(13,30,59,84,12),Array(52,88,79,62,29),Array(99,39,95,55,70),Array(80,46,31,89,69),Array(74,71,65,3,38),Array(47,86,21,24,22),Array(0,62,69,38,59),Array(27,10,41,81,92),Array(14,51,35,13,17),Array(30,15,7,71,70),Array(25,26,29,66,32),Array(68,46,77,45,86),Array(14,15,90,40,22),Array(6,36,17,76,1),Array(80,55,83,98,79),Array(98,76,58,27,39),Array(45,90,56,46,69),Array(10,41,54,82,25),Array(94,86,89,33,79),Array(16,30,87,24,83),Array(66,28,93,91,68),Array(71,51,22,10,42),Array(29,20,77,17,8),Array(55,39,89,72,12),Array(98,78,65,48,41),Array(49,25,80,64,99),Array(90,9,40,76,63),Array(60,93,46,4,27),Array(17,0,42,33,28),Array(59,26,18,69,75),Array(35,0,76,58,31),Array(87,17,42,13,33),Array(70,67,61,52,12),Array(59,85,64,80,1),Array(4,73,99,55,48),Array(40,73,94,80,90),Array(9,93,17,51,62),Array(96,0,57,82,47),Array(86,27,64,95,84),Array(16,99,37,41,44),Array(8,96,31,26,50),Array(20,69,75,82,89),Array(94,42,38,78,35),Array(83,13,45,62,43),Array(97,14,34,17,47),Array(35,88,38,7,97),Array(8,79,51,74,26),Array(60,22,53,5,33),Array(63,23,69,0,83),Array(21,44,91,95,18),Array(64,77,4,0,15),Array(80,66,9,16,5),Array(75,8,18,40,91),Array(72,1,49,60,97),Array(14,24,34,65,92),Array(84,75,31,56,55),Array(17,92,48,45,89),Array(88,52,10,90,47),Array(91,97,6,39,79),Array(99,65,11,42,93),Array(7,82,10,88,49),Array(11,66,54,3,53),Array(4,73,71,42,92),Array(22,75,84,16,48),Array(5,94,79,96,45),Array(20,87,16,25,9),Array(15,70,19,72,56),Array(71,37,69,2,62),Array(76,97,41,8,92),Array(40,65,86,0,32),Array(81,48,14,75,4),Array(70,30,6,74,62),Array(15,28,55,22,63),Array(36,32,35,86,71),Array(29,47,59,18,78),Array(10,35,27,14,64),Array(43,19,86,71,36),Array(32,79,9,51,91),Array(17,67,26,41,56),Array(15,1,95,13,65),Array(74,79,22,30,46),Array(80,55,57,14,37),Array(59,88,40,83,56),Array(63,10,97,64,7),Array(77,61,53,91,20),Array(53,81,13,72,67),Array(79,10,71,11,8),Array(0,99,60,20,4),Array(7,45,89,66,98),Array(50,36,80,57,5),Array(5,7,35,4,29),Array(28,65,31,86,33),Array(66,98,75,13,92),Array(38,67,80,46,11),Array(9,15,57,71,32),Array(21,33,22,77,5),Array(0,6,59,37,69),Array(50,45,32,60,96),Array(9,39,28,56,57),Array(34,46,43,52,25),Array(67,11,21,53,60),Array(52,58,54,94,47),Array(84,46,72,81,16),Array(31,51,23,36,97),Array(80,43,75,99,79))

  val boardList = inputBoards.grouped(5).map(new Board(_)).toList

  class Board(lines: Array[Array[Int]]) {
    override def toString: String = {
      var res = ""
      lines.foreach(line => {
        line.foreach(value => res = res + value.toString.padTo(3, ' ') + " ")
        res = res + "\n"
      })
      res
    }

    private def sumBoard: Int = {
      lines.map(line => line.filterNot(value => value == -1).sum).sum
    }

    def getSum: Int = {
      sumBoard
    }

    def calculateTotal(winningNumber: Int): Int = {
      sumBoard * winningNumber
    }

    def updateBoard(number: Int): Unit = {
      for (i <- 0 until 5) {
        for (j <- 0 until 5) {
          if (lines(i)(j) == number) {
            lines(i)(j) = -1
            return
          }
        }
      }
    }


    def won: Boolean = {
      for (i <- 0 until 5) {
        breakable {
          for (j <- 0 until 5) {
            if (lines(i)(j) != -1) {
              break
            }
            if (j == 4) {
              return true
            }
          }
        }
      }

      for (i <- 0 until 5) {
        breakable {
          for (j <- 0 until 5) {
            if (lines(j)(i) != -1) {
              break
            }
            if (j == 4) {
              return true
            }
          }
        }
      }
      false
    }

  }

  def main(args: Array[String]): Unit = {
    println(playBingo)
  }

  def playBingo: Int = {
    for (ball <- inputBalls) {
      for (board <- boardList) {
        board.updateBoard(ball)
        if (board.won) {
          println("$" + board.toString)
          return board.calculateTotal(ball)
        }
      }
    }
    return 0
  }

}
